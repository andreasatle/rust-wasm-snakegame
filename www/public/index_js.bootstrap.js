"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["index_js"],{

/***/ "../pkg/snake_game.js":
/*!****************************!*\
  !*** ../pkg/snake_game.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameStatus\": () => (/* binding */ GameStatus),\n/* harmony export */   \"World\": () => (/* binding */ World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _snippets_snake_game_027f5cd2d64d2885_www_utils_rand_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/snake_game-027f5cd2d64d2885/www/utils/rand.js */ \"../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.js\");\n\n\nlet wasm;\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* GameStatus contains the different states the game can be in.\n* The state affects what happens at a keystroke from the user.\n* It is also used in the main loop of the game in javascript.\n*/\nconst GameStatus = Object.freeze({\n/**\n* State before Game is starting.\n*/\nIdle:0,\"0\":\"Idle\",\n/**\n* State where game is being played.\n*/\nPlaying:1,\"1\":\"Playing\",\n/**\n* State after snake did illegal move.\n*/\nGameOver:2,\"2\":\"GameOver\", });\n/**\n* World contains the information about the playfield.\n*/\nclass World {\n\n    static __wrap(ptr) {\n        const obj = Object.create(World.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * Status of the game.\n    */\n    get status() {\n        var ret = wasm.__wbg_get_world_status(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Status of the game.\n    * @param {number} arg0\n    */\n    set status(arg0) {\n        wasm.__wbg_set_world_status(this.ptr, arg0);\n    }\n    /**\n    * Create a new instance of the world.\n    * @param {number} width\n    * @param {number} extend\n    * @returns {World}\n    */\n    static new(width, extend) {\n        var ret = wasm.world_new(width, extend);\n        return World.__wrap(ret);\n    }\n    /**\n    * Reset an existing instance of the world.\n    * @param {number} extend\n    */\n    reset(extend) {\n        wasm.world_reset(this.ptr, extend);\n    }\n    /**\n    * Getter for the width.\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.world_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Getter for the world index to the reward cell.\n    * @returns {number}\n    */\n    reward_cell() {\n        var ret = wasm.world_reward_cell(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Getter for the world index to the penalty cell.\n    * @returns {number}\n    */\n    penalty_cell() {\n        var ret = wasm.world_penalty_cell(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Compute the row from the world index.\n    * @param {number} idx\n    * @returns {number}\n    */\n    row(idx) {\n        var ret = wasm.world_row(this.ptr, idx);\n        return ret >>> 0;\n    }\n    /**\n    * Compute the column from the world index.\n    * @param {number} idx\n    * @returns {number}\n    */\n    col(idx) {\n        var ret = wasm.world_col(this.ptr, idx);\n        return ret >>> 0;\n    }\n    /**\n    * Compute the world index from the row and column.\n    * @param {number} row\n    * @param {number} col\n    * @returns {number}\n    */\n    index(row, col) {\n        var ret = wasm.world_index(this.ptr, row, col);\n        return ret >>> 0;\n    }\n    /**\n    * Update the state of a game that is going on.\n    */\n    update() {\n        wasm.world_update(this.ptr);\n    }\n    /**\n    * Take action on keystroke, depending on game status.\n    * @param {string} key\n    */\n    keystroke(key) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.world_keystroke(this.ptr, ptr0, len0);\n    }\n    /**\n    * Return the pointer to the snake body.\n    * @returns {number}\n    */\n    snake_cells() {\n        var ret = wasm.world_snake_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * Return the length to the snake body.\n    * @returns {number}\n    */\n    snake_len() {\n        var ret = wasm.world_snake_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Getter for the GameStatus.\n    * @returns {number}\n    */\n    status() {\n        var ret = wasm.world_status(this.ptr);\n        return ret >>> 0;\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! snake_game_bg.wasm */ \"../pkg/snake_game_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_rand_c5b7f41ce19ac9ab = function(arg0) {\n        var ret = (0,_snippets_snake_game_027f5cd2d64d2885_www_utils_rand_js__WEBPACK_IMPORTED_MODULE_0__.rand)(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n\n//# sourceURL=webpack://www/../pkg/snake_game.js?");

/***/ }),

/***/ "../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.js":
/*!*********************************************************************!*\
  !*** ../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rand\": () => (/* binding */ rand)\n/* harmony export */ });\nfunction rand(max) {\n    return Math.floor(Math.random()*max);\n}\n\n//# sourceURL=webpack://www/../pkg/snippets/snake_game-027f5cd2d64d2885/www/utils/rand.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var snake_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! snake_game */ \"../pkg/snake_game.js\");\n// Import rust code.\n\n\n// Definition of colors\nconst LIGHT_BLUE   = '#85C1E9';\nconst BLUE         = '#2980B9';\nconst DARK_BLUE    = '#1F618D';\nconst GREEN        = '#1ABC9C';\nconst RED          = '#CB4335';\nconst ALMOST_WHITE = '#F0F0F0';\n\n// Set some global variables.\nconst CELL_SIZE = 10;\nconst WORLD_WIDTH = 20;\nconst INITIAL_SNAKE_WIDTH = 3;\n\n(0,snake_game__WEBPACK_IMPORTED_MODULE_0__[\"default\"])().then(wasm => {\n    // Create an instance of the world (the game).\n    const world = snake_game__WEBPACK_IMPORTED_MODULE_0__.World[\"new\"](WORLD_WIDTH, INITIAL_SNAKE_WIDTH);\n    const worldWidth = world.width();\n\n    // Setup the canvas from HTML.\n    const canvas = document.getElementById(\"snake-canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    // Set the dimensions of the canvas.\n    canvas.height = canvas.width = worldWidth*CELL_SIZE;\n\n    // Listen for key-strokes.\n    document.addEventListener(\"keydown\", (e) => {\n        world.keystroke(e.code);\n    })\n\n    // Draw the grid.\n    const drawWorld = (color) => {\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        for (let x = 0; x <= worldWidth; x++) {\n            ctx.moveTo(CELL_SIZE*x, 0);\n            ctx.lineTo(CELL_SIZE*x, canvas.height);\n        }\n        for (let y = 0; y <= worldWidth; y++) {\n            ctx.moveTo(0, CELL_SIZE*y);\n            ctx.lineTo(canvas.width, CELL_SIZE*y);\n        }\n        ctx.stroke();\n    }\n\n    // Draw the snake within the grid.\n    const drawSnake = (headColor, tailColor) => {\n        const snake_len = world.snake_len()\n        const snakeCells = new Uint32Array(wasm.memory.buffer, world.snake_cells(), snake_len)\n        \n        snakeCells.forEach((snakeIdx,i) => {\n            ctx.fillStyle = (i == snake_len-1) ? headColor : tailColor;\n            let row = world.row(snakeIdx);\n            let col = world.col(snakeIdx);\n            ctx.beginPath();\n            ctx.fillRect(col*CELL_SIZE, row*CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        })\n        ctx.stroke()\n    }\n\n    // Draw a single cell in the grid (of the world).\n    const drawCell = (idx, color) => {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.fillRect(\n            world.col(idx)*CELL_SIZE,\n            world.row(idx)*CELL_SIZE,\n            CELL_SIZE,\n            CELL_SIZE);\n        ctx.stroke()\n    }\n\n    // Message that we should hit a key to start a new game.\n    const idleState = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawWorld(ALMOST_WHITE);\n        ctx.strokeStyle = GREEN;\n        ctx.font = \"20px Arial\";\n        ctx.strokeText(\"Press any key\", 10, 50);\n    }\n\n    // Draw and update the game.\n    const playingState = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawWorld(LIGHT_BLUE);\n        drawSnake(DARK_BLUE, BLUE);\n        drawCell(world.reward_cell(), GREEN);\n        drawCell(world.penalty_cell(), RED);\n        world.update();\n    }\n\n    // Message game over after illegal move.\n    const gameOverState = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawWorld(ALMOST_WHITE);\n        ctx.font = \"20px Arial\";\n        ctx.strokeStyle = RED;\n        ctx.strokeText(\"GAME OVER!\", 10, 50);\n        ctx.strokeText(\"Press any key\", 10, 100);\n    }\n\n    // Game-loop every 100 ms.\n    setInterval(_ => {\n        switch (world.status()) {\n            case snake_game__WEBPACK_IMPORTED_MODULE_0__.GameStatus.Idle:\n                idleState();\n                break;\n            case snake_game__WEBPACK_IMPORTED_MODULE_0__.GameStatus.Playing:\n                playingState();\n                break;\n            case snake_game__WEBPACK_IMPORTED_MODULE_0__.GameStatus.GameOver:\n                gameOverState();\n                break;\n        }\n    }, 100)\n\n})\n\n//# sourceURL=webpack://www/./index.js?");

/***/ }),

/***/ "../pkg/snake_game_bg.wasm":
/*!*********************************!*\
  !*** ../pkg/snake_game_bg.wasm ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"81f1d0864b48efb79886.wasm\";\n\n//# sourceURL=webpack://www/../pkg/snake_game_bg.wasm?");

/***/ })

}]);